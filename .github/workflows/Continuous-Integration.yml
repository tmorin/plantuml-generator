name: Continuous-Integration

on: [ push, pull_request ]

jobs:

  Lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: "Cache cargo stuff"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-lint-${{ hashFiles('**/Cargo.lock') }}
      - name: "Install the toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - name: "Check with clippy"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  Test:
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: "Install dependencies"
        run: |
          sudo add-apt-repository ppa:inkscape.dev/stable -y
          sudo apt update
          sudo apt-get install pkg-config libssl-dev openjdk-11-jre graphviz inkscape
          inkscape --version
          inkscape --help
        shell: bash
      - name: "Cache cargo stuff"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
      - name: "Install the toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: "Perform the tests"
        uses: actions-rs/cargo@v1
        with:
          command: test

  Binary:
    name: Binary
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - architecture: aarch64
            system: linux
            target: aarch64-unknown-linux-gnu
          - architecture: x86_64
            system: linux
            target: x86_64-unknown-linux-gnu
          - architecture: powerpc64le
            system: linux
            target: powerpc64le-unknown-linux-gnu
          - architecture: s390x
            system: linux
            target: s390x-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - name: "Install the dependencies"
        run: sudo apt-get install pkg-config libssl-dev
        shell: bash
      - name: "Cache cargo stuff"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-binary-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: "Install the toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: "Build the binary"
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }} --features vendored-openssl
      - name: "Archive the binary"
        run: tar -C target/${{ matrix.target }}/release/ -czf ${{ matrix.system }}_${{ matrix.architecture }}_plantuml-generator.tar.gz plantuml-generator
      - name: "Upload the binary"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.system }}_${{ matrix.architecture }}_plantuml-generator
          path: ${{ matrix.system }}_${{ matrix.architecture }}_plantuml-generator.tar.gz
#      - name: "Publish the crate"
#        if: ${{ startsWith(github.ref, 'refs/tags/') }}
#        uses: actions-rs/cargo@v1
#        with:
#          use-cross: true
#          command: publish
#          args: --target=${{ matrix.target }} --features vendored-openssl --token ${{ secrets.CRATEIO_TOKEN }}

  DebianPackage:
    name: Debian Package
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - architecture: x86_64
            system: linux
            target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      - name: "Install the dependencies"
        run: sudo apt-get install build-essential pkg-config dpkg libc-bin libssl-dev liblzma-dev
        shell: bash
      - name: "Cache cargo stuff"
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-debian-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: "Install the toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: "Install cargo-deb"
        run: cargo install cargo-deb -q || true
      - name: "Build the deb package"
        run: cargo deb --target=${{ matrix.target }} -- --features vendored-openssl
      - name: "Upload the deb package"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.system }}${{ matrix.architecture }}_plantuml-generator
          path: target/${{ matrix.target }}/debian/*.deb

  DockerImage:
    name: Docker Image
    runs-on: ubuntu-20.04
    needs: [ Lint, Test ]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v3
      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1
      - name: "Login to Docker Hub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: "Inject slug/short variables"
        uses: rlespinasse/github-slug-action@v3.x
      - name: "Build and push branches"
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64
          tags: |
            thibaultmorin/plantuml-generator:${{ env.GITHUB_REF_SLUG }}
          build-args: |
            git_sha=${{ github.sha }}
      - name: "Process version of the tag"
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: version
        uses: ncipollo/semantic-version-action@v1
      - name: "Build and push tags"
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: linux/amd64
          tags: |
            thibaultmorin/plantuml-generator:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}.${{ steps.version.outputs.patch }}
            thibaultmorin/plantuml-generator:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}
            thibaultmorin/plantuml-generator:${{ steps.version.outputs.major }}
          build-args: |
            git_sha=${{ github.sha }}

  GithubRelease:
    name: Github Release
    runs-on: ubuntu-20.04
    needs: [ Lint, Test, Binary, DebianPackage ]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v3
      - name: "Download all artifacts"
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: "List artifacts"
        run: ls -R
        working-directory: artifacts
      - name: "Create the changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          ignorePreReleases: true
          commitMode: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Create the release"
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "artifacts/**/*.tar.gz,artifacts/**/*.deb"
          omitName: true
          draft: false
          body: ${{steps.build_changelog.outputs.changelog}}
          token: ${{ secrets.GITHUB_TOKEN }}
